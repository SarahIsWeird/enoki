package blue.endless.enoki.markdown.styles.properties;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import blue.endless.enoki.util.NotNullByDefault;

@NotNullByDefault
public class IntStyleProperty extends StyleProperty<@NotNull Integer> {
	private final int lowerBoundInclusive;
	private final int upperBoundInclusive;
	
	private IntStyleProperty(String name, int lowerBoundInclusive, int upperBoundInclusive) {
		super(Integer.class, name);
		
		this.lowerBoundInclusive = lowerBoundInclusive;
		this.upperBoundInclusive = upperBoundInclusive;
	}
	
	public static IntStyleProperty of(String name, int lowerBoundInclusive, int upperBoundInclusive) {
		return new IntStyleProperty(name, lowerBoundInclusive, upperBoundInclusive);
	}

	public static IntStyleProperty of(String name) {
		return IntStyleProperty.of(name, Integer.MIN_VALUE, Integer.MAX_VALUE);
	}

	public static IntStyleProperty nonNegativeOnly(String name) {
		return IntStyleProperty.of(name, 0, Integer.MAX_VALUE);
	}
	
	public static IntStyleProperty positiveOnly(String name) {
		return IntStyleProperty.of(name, 1, Integer.MAX_VALUE);
	}

	@Override
	public boolean isValid(Integer value) {
		return lowerBoundInclusive <= value && value <= upperBoundInclusive;
	}

	@Override
	public final boolean equals(@Nullable Object object) {
		// This method is auto-generated by IntelliJ.

		if (!(object instanceof IntStyleProperty that)) return false;
		if (!super.equals(object)) return false;

		return lowerBoundInclusive == that.lowerBoundInclusive && upperBoundInclusive == that.upperBoundInclusive;
	}

	@Override
	public int hashCode() {
		// This method is auto-generated by IntelliJ.

		int result = super.hashCode();
		result = 31 * result + lowerBoundInclusive;
		result = 31 * result + upperBoundInclusive;
		return result;
	}
}
